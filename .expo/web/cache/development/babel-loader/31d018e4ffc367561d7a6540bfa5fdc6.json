{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nexport var GET_MOVIES = 'GET_MOVIES';\nexport var GET_MOVIE_DETAILS = 'GET_MOVIE_DETAILS';\nvar BASE_URL_ENDPOINT = \"https://www.omdbapi.com?apikey=5fb20880\";\nexport var getMovies = function getMovies(movieName) {\n  try {\n    return function _callee(dispatch) {\n      var results, movies, pages, i, res, size, _i;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              results = [];\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(axios.get(BASE_URL_ENDPOINT + \"&s=\" + movieName + \"&page=1\"));\n\n            case 3:\n              movies = _context.sent;\n              pages = movies.data.totalResults;\n              i = 1;\n\n            case 6:\n              if (!(i <= 50)) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(axios.get(BASE_URL_ENDPOINT + \"&s=\" + movieName + \"&page=\" + i));\n\n            case 9:\n              res = _context.sent;\n              size = Object.keys(res).length;\n\n              for (_i = 1; _i <= size; _i++) {\n                results.push(res.data.Search[_i]);\n              }\n\n            case 12:\n              i++;\n              _context.next = 6;\n              break;\n\n            case 15:\n              if (results) {\n                dispatch({\n                  type: GET_MOVIES,\n                  payload: results\n                });\n              } else {\n                console.log('Unable to fetch');\n              }\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport var getMovieDetails = function getMovieDetails(movieID) {\n  try {\n    return function _callee2(dispatch) {\n      var movieDetails;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(BASE_URL_ENDPOINT + \"&i=\" + movieID));\n\n            case 2:\n              movieDetails = _context2.sent;\n\n              if (movieDetails.data) {\n                dispatch({\n                  type: GET_MOVIE_DETAILS,\n                  payload: movieDetails.data\n                });\n              } else {\n                console.log('Unable to fetch');\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/ashwininagaraj/MoviesInventory/redux/actions.js"],"names":["axios","GET_MOVIES","GET_MOVIE_DETAILS","BASE_URL_ENDPOINT","getMovies","movieName","dispatch","results","get","movies","pages","data","totalResults","i","res","size","Object","keys","length","push","Search","type","payload","console","log","error","getMovieDetails","movieID","movieDetails"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,IAAMC,iBAAiB,GAAG,yCAA1B;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,SAAD,EAAe;AACpC,MAAI;AACF,WAAO,iBAAMC,QAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACDC,cAAAA,OADC,GACQ,EADR;AAAA;AAAA,+CAEUP,KAAK,CAACQ,GAAN,CAAaL,iBAAb,WAAoCE,SAApC,aAFV;;AAAA;AAELI,cAAAA,MAFK;AAGPC,cAAAA,KAHO,GAGAD,MAAM,CAACE,IAAP,CAAYC,YAHZ;AAKHC,cAAAA,CALG,GAKD,CALC;;AAAA;AAAA,oBAKEA,CAAC,IAAE,EALL;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAMSb,KAAK,CAACQ,GAAN,CAAaL,iBAAb,WAAoCE,SAApC,cAAsDQ,CAAtD,CANT;;AAAA;AAMHC,cAAAA,GANG;AAOLC,cAAAA,IAPK,GAOEC,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,MAPnB;;AAQT,mBAAQL,EAAR,GAAU,CAAV,EAAaA,EAAC,IAAEE,IAAhB,EAAsBF,EAAC,EAAvB,EAA0B;AACxBN,gBAAAA,OAAO,CAACY,IAAR,CAAaL,GAAG,CAACH,IAAJ,CAASS,MAAT,CAAgBP,EAAhB,CAAb;AACD;;AAVQ;AAKSA,cAAAA,CAAC,EALV;AAAA;AAAA;;AAAA;AAYL,kBAAIN,OAAJ,EAAa;AACXD,gBAAAA,QAAQ,CAAC;AACPe,kBAAAA,IAAI,EAAEpB,UADC;AAEPqB,kBAAAA,OAAO,EAAEf;AAFF,iBAAD,CAAR;AAID,eALD,MAKO;AACLgB,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD;;AAnBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAqBD,GAtBD,CAsBE,OAAOC,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACF,CA1BI;AA4BL,OAAQ,IAAMC,eAAe,GAAC,SAAhBA,eAAgB,CAACC,OAAD,EAAY;AACxC,MAAI;AACA,WAAO,kBAAMrB,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACsBN,KAAK,CAACQ,GAAN,CAAaL,iBAAb,WAAoCwB,OAApC,CADtB;;AAAA;AACCC,cAAAA,YADD;;AAEL,kBAAIA,YAAY,CAACjB,IAAjB,EAAuB;AACrBL,gBAAAA,QAAQ,CAAC;AACPe,kBAAAA,IAAI,EAAEnB,iBADC;AAEPoB,kBAAAA,OAAO,EAAEM,YAAY,CAACjB;AAFf,iBAAD,CAAR;AAID,eALD,MAKO;AACLY,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD;;AATI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAWD,GAZH,CAYI,OAAOC,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACN,CAhBS","sourcesContent":["import axios from \"axios\";\nexport const GET_MOVIES = 'GET_MOVIES';\nexport const GET_MOVIE_DETAILS = 'GET_MOVIE_DETAILS';\n\nconst BASE_URL_ENDPOINT = \"https://www.omdbapi.com?apikey=5fb20880\";\n\n\nexport const getMovies = (movieName) => {\n    try {\n      return async dispatch => {\n        let results =[];\n  const movies = await axios.get(`${BASE_URL_ENDPOINT}&s=${movieName}&page=1`);\n  let pages= movies.data.totalResults;\n  //to limit to top 50 movies\n  for(let i=1; i<=50; i++){\n    const res = await axios.get(`${BASE_URL_ENDPOINT}&s=${movieName}&page=${i}`);\n    let size = Object.keys(res).length\n    for(let i=1; i<=size; i++){\n      results.push(res.data.Search[i])\n    }\n  }\n        if (results) {\n          dispatch({\n            type: GET_MOVIES,\n            payload: results,\n          });\n        } else {\n          console.log('Unable to fetch');\n        }\n      };\n    } catch (error) {\n      console.log(error)\n    }\n  };\n\n  export  const getMovieDetails=(movieID)=> {\n    try {\n        return async dispatch => {\n          const movieDetails = await axios.get(`${BASE_URL_ENDPOINT}&i=${movieID}`);\n          if (movieDetails.data) {\n            dispatch({\n              type: GET_MOVIE_DETAILS,\n              payload: movieDetails.data,\n            });\n          } else {\n            console.log('Unable to fetch');\n          }\n        };\n      } catch (error) {\n        console.log(error)\n      }\n};\n\n"]},"metadata":{},"sourceType":"module"}