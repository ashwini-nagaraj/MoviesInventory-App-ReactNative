{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nexport var GET_MOVIES = 'GET_MOVIES';\nexport var GET_MOVIE_DETAILS = 'GET_MOVIE_DETAILS';\nvar BASE_URL_ENDPOINT = \"https://www.omdbapi.com?apikey=9c538846\";\nexport var getMovies = function getMovies(movieName) {\n  try {\n    return function _callee(dispatch) {\n      var results, movies, i, res, size, _i;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              results = [];\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(axios.get(BASE_URL_ENDPOINT + \"&s=\" + movieName + \"&page=1\"));\n\n            case 3:\n              movies = _context.sent;\n              i = 1;\n\n            case 5:\n              if (!(i <= 30)) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(axios.get(BASE_URL_ENDPOINT + \"&s=\" + movieName + \"&page=\" + i));\n\n            case 8:\n              res = _context.sent;\n              size = Object.keys(res).length;\n\n              for (_i = 1; _i <= size; _i++) {\n                results.push(res.data.Search[_i]);\n              }\n\n              console.log(results);\n\n            case 12:\n              i++;\n              _context.next = 5;\n              break;\n\n            case 15:\n              if (results) {\n                dispatch({\n                  type: GET_MOVIES,\n                  payload: results\n                });\n              } else {\n                console.log('Unable to fetch');\n              }\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport var getMovieDetails = function getMovieDetails(movieID) {\n  try {\n    return function _callee2(dispatch) {\n      var movieDetails;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(BASE_URL_ENDPOINT + \"&i=\" + movieID));\n\n            case 2:\n              movieDetails = _context2.sent;\n\n              if (movieDetails.data) {\n                dispatch({\n                  type: GET_MOVIE_DETAILS,\n                  payload: movieDetails.data\n                });\n              } else {\n                console.log('Unable to fetch');\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/ashwininagaraj/MoviesInventory/redux/actions.js"],"names":["axios","GET_MOVIES","GET_MOVIE_DETAILS","BASE_URL_ENDPOINT","getMovies","movieName","dispatch","results","get","movies","i","res","size","Object","keys","length","push","data","Search","console","log","type","payload","error","getMovieDetails","movieID","movieDetails"],"mappings":";AAAI,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,IAAMC,iBAAiB,GAAG,yCAA1B;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,SAAD,EAAe;AACpC,MAAI;AACF,WAAO,iBAAMC,QAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACHC,cAAAA,OADG,GACM,EADN;AAAA;AAAA,+CAEeP,KAAK,CAACQ,GAAN,CAAaL,iBAAb,WAAoCE,SAApC,aAFf;;AAAA;AAEAI,cAAAA,MAFA;AAKDC,cAAAA,CALC,GAKC,CALD;;AAAA;AAAA,oBAKIA,CAAC,IAAE,EALP;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAMSV,KAAK,CAACQ,GAAN,CAAaL,iBAAb,WAAoCE,SAApC,cAAsDK,CAAtD,CANT;;AAAA;AAMHC,cAAAA,GANG;AAOLC,cAAAA,IAPK,GAOEC,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,MAPnB;;AAQT,mBAAQL,EAAR,GAAU,CAAV,EAAaA,EAAC,IAAEE,IAAhB,EAAsBF,EAAC,EAAvB,EAA0B;AACxBH,gBAAAA,OAAO,CAACS,IAAR,CAAaL,GAAG,CAACM,IAAJ,CAASC,MAAT,CAAgBR,EAAhB,CAAb;AACD;;AACDS,cAAAA,OAAO,CAACC,GAAR,CAAYb,OAAZ;;AAXS;AAKWG,cAAAA,CAAC,EALZ;AAAA;AAAA;;AAAA;AAaL,kBAAIH,OAAJ,EAAa;AACXD,gBAAAA,QAAQ,CAAC;AACPe,kBAAAA,IAAI,EAAEpB,UADC;AAEPqB,kBAAAA,OAAO,EAAEf;AAFF,iBAAD,CAAR;AAID,eALD,MAKO;AACLY,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD;;AApBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAsBD,GAvBD,CAuBE,OAAOG,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF,CA3BI;AA6BL,OAAQ,IAAMC,eAAe,GAAC,SAAhBA,eAAgB,CAACC,OAAD,EAAY;AACxC,MAAI;AACA,WAAO,kBAAMnB,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACsBN,KAAK,CAACQ,GAAN,CAAaL,iBAAb,WAAoCsB,OAApC,CADtB;;AAAA;AACCC,cAAAA,YADD;;AAEL,kBAAIA,YAAY,CAACT,IAAjB,EAAuB;AACrBX,gBAAAA,QAAQ,CAAC;AACPe,kBAAAA,IAAI,EAAEnB,iBADC;AAEPoB,kBAAAA,OAAO,EAAEI,YAAY,CAACT;AAFf,iBAAD,CAAR;AAID,eALD,MAKO;AACLE,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD;;AATI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAWD,GAZH,CAYI,OAAOG,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACN,CAhBS","sourcesContent":["    import axios from \"axios\";\n    export const GET_MOVIES = 'GET_MOVIES';\n    export const GET_MOVIE_DETAILS = 'GET_MOVIE_DETAILS';\n\n    const BASE_URL_ENDPOINT = \"https://www.omdbapi.com?apikey=9c538846\";\n\n\n    export const getMovies = (movieName) => {\n        try {\n          return async dispatch => {\n          let results =[];\n           const movies = await axios.get(`${BASE_URL_ENDPOINT}&s=${movieName}&page=1`);\n          //let pages= movies.data.totalResults;\n         //to limit to top 30 movies\n        for(let i=1; i<=30; i++){\n        const res = await axios.get(`${BASE_URL_ENDPOINT}&s=${movieName}&page=${i}`);\n        let size = Object.keys(res).length\n        for(let i=1; i<=size; i++){\n          results.push(res.data.Search[i])\n        }\n        console.log(results)\n      }\n            if (results) {\n              dispatch({\n                type: GET_MOVIES,\n                payload: results,\n              });\n            } else {\n              console.log('Unable to fetch');\n            }\n          };\n        } catch (error) {\n          console.log(error)\n        }\n      };\n\n      export  const getMovieDetails=(movieID)=> {\n        try {\n            return async dispatch => {\n              const movieDetails = await axios.get(`${BASE_URL_ENDPOINT}&i=${movieID}`);\n              if (movieDetails.data) {\n                dispatch({\n                  type: GET_MOVIE_DETAILS,\n                  payload: movieDetails.data,\n                });\n              } else {\n                console.log('Unable to fetch');\n              }\n            };\n          } catch (error) {\n            console.log(error)\n          }\n    };\n\n"]},"metadata":{},"sourceType":"module"}