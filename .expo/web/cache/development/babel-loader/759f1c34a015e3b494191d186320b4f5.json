{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nexport var GET_MOVIES = 'GET_MOVIES';\nexport var GET_MOVIE_DETAILS = 'GET_MOVIE_DETAILS';\nvar BASE_URL_ENDPOINT = \"https://www.omdbapi.com?apikey=9c538846\";\nexport var getMovies = function getMovies(movieName) {\n  try {\n    return function _callee(dispatch) {\n      var movies;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(BASE_URL_ENDPOINT + \"&s=\" + movieName));\n\n            case 2:\n              movies = _context.sent;\n\n              if (movies.data) {\n                dispatch({\n                  type: GET_MOVIES,\n                  payload: movies.data.Search\n                });\n              } else {\n                console.log('Unable to fetch');\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport var getMovieDetails = function getMovieDetails(movieID) {\n  try {\n    return function _callee2(dispatch) {\n      var movieDetails;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(BASE_URL_ENDPOINT + \"&i=\" + movieID));\n\n            case 2:\n              movieDetails = _context2.sent;\n\n              if (movieDetails.data) {\n                dispatch({\n                  type: GET_MOVIE_DETAILS,\n                  payload: movieDetails.data\n                });\n              } else {\n                console.log('Unable to fetch');\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/ashwininagaraj/MoviesInventory/redux/actions.js"],"names":["axios","GET_MOVIES","GET_MOVIE_DETAILS","BASE_URL_ENDPOINT","getMovies","movieName","dispatch","get","movies","data","type","payload","Search","console","log","error","getMovieDetails","movieID","movieDetails"],"mappings":";AAAI,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,IAAMC,iBAAiB,GAAG,yCAA1B;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,SAAD,EAAe;AACpC,MAAI;AACF,WAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACYN,KAAK,CAACO,GAAN,CAAaJ,iBAAb,WAAoCE,SAApC,CADZ;;AAAA;AACHG,cAAAA,MADG;;AAEL,kBAAIA,MAAM,CAACC,IAAX,EAAiB;AACfH,gBAAAA,QAAQ,CAAC;AACPI,kBAAAA,IAAI,EAAET,UADC;AAEPU,kBAAAA,OAAO,EAAEH,MAAM,CAACC,IAAP,CAAYG;AAFd,iBAAD,CAAR;AAID,eALD,MAKO;AACLC,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD;;AATI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAWD,GAZD,CAYE,OAAOC,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACF,CAhBI;AAkBL,OAAQ,IAAMC,eAAe,GAAC,SAAhBA,eAAgB,CAACC,OAAD,EAAY;AACxC,MAAI;AACA,WAAO,kBAAMX,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACsBN,KAAK,CAACO,GAAN,CAAaJ,iBAAb,WAAoCc,OAApC,CADtB;;AAAA;AACCC,cAAAA,YADD;;AAEL,kBAAIA,YAAY,CAACT,IAAjB,EAAuB;AACrBH,gBAAAA,QAAQ,CAAC;AACPI,kBAAAA,IAAI,EAAER,iBADC;AAEPS,kBAAAA,OAAO,EAAEO,YAAY,CAACT;AAFf,iBAAD,CAAR;AAID,eALD,MAKO;AACLI,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACD;;AATI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAWD,GAZH,CAYI,OAAOC,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACN,CAhBS","sourcesContent":["    import axios from \"axios\";\n    export const GET_MOVIES = 'GET_MOVIES';\n    export const GET_MOVIE_DETAILS = 'GET_MOVIE_DETAILS';\n\n    const BASE_URL_ENDPOINT = \"https://www.omdbapi.com?apikey=9c538846\";\n\n\n    export const getMovies = (movieName) => {\n        try {\n          return async dispatch => {\n        const movies = await axios.get(`${BASE_URL_ENDPOINT}&s=${movieName}`);\n            if (movies.data) {\n              dispatch({\n                type: GET_MOVIES,\n                payload: movies.data.Search,\n              });\n            } else {\n              console.log('Unable to fetch');\n            }\n          };\n        } catch (error) {\n          console.log(error)\n        }\n      };\n\n      export  const getMovieDetails=(movieID)=> {\n        try {\n            return async dispatch => {\n              const movieDetails = await axios.get(`${BASE_URL_ENDPOINT}&i=${movieID}`);\n              if (movieDetails.data) {\n                dispatch({\n                  type: GET_MOVIE_DETAILS,\n                  payload: movieDetails.data,\n                });\n              } else {\n                console.log('Unable to fetch');\n              }\n            };\n          } catch (error) {\n            console.log(error)\n          }\n    };\n\n"]},"metadata":{},"sourceType":"module"}